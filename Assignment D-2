#include <iostream>
#include <vector>
using namespace std;

// Function to perform DFS and count paths
void countPathsDFS(vector<vector<int>>& graph, int current, int destination, vector<bool>& visited, int& pathCount) {
    // If the current vertex is the destination, increment the path count
    if (current == destination) {
        pathCount++;
        return;
    }

    // Mark the current vertex as visited
    visited[current] = true;

    // Explore all adjacent vertices
    for (int neighbor : graph[current]) {
        if (!visited[neighbor]) {
            countPathsDFS(graph, neighbor, destination, visited, pathCount);
        }
    }

    // Backtrack and unmark the current vertex
    visited[current] = false;
}

// Function to count all possible paths between two vertices
int countPaths(vector<vector<int>>& graph, int start, int end, int n) {
    vector<bool> visited(n, false); // To track visited vertices
    int pathCount = 0; // To store the number of paths

    // Call DFS to count paths
    countPathsDFS(graph, start, end, visited, pathCount);

    return pathCount;
}

int main() {
    // Define the graph as an adjacency list
    // Graph example: A -> B -> C, A -> D -> E, B -> D -> E, C -> E
    vector<vector<int>> graph = {
        {1, 3},      // A -> B, A -> D
        {2, 3},      // B -> C, B -> D
        {4},         // C -> E
        {4},         // D -> E
        {}           // E has no outgoing edges
    };

    int n = graph.size(); // Number of vertices

    // Count paths between A (0) and E (4)
    cout << "Total paths between A and E: " << countPaths(graph, 0, 4, n) << endl;

    // Count paths between A (0) and C (2)
    cout << "Total paths between A and C: " << countPaths(graph, 0, 2, n) << endl;

    return 0;
}
