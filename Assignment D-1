#include <iostream>
#include <vector>
#include <set>
using namespace std;

// Function to find all distinct subsets using bit masking
vector<vector<int>> findSubsets(vector<int>& arr) {
    int n = arr.size();
    set<vector<int>> subsets; // Use a set to ensure no duplicate subsets

    // Generate all subsets using bit masks
    for (int mask = 0; mask < (1 << n); mask++) {
        vector<int> subset;

        // Check each bit in the mask
        for (int i = 0; i < n; i++) {
            if (mask & (1 << i)) { // If the i-th bit is set, include arr[i]
                subset.push_back(arr[i]);
            }
        }

        // Sort the subset to handle duplicate elements properly
        sort(subset.begin(), subset.end());

        // Insert the subset into the set
        subsets.insert(subset);
    }

    // Convert the set to a vector of vectors for output
    return vector<vector<int>>(subsets.begin(), subsets.end());
}

int main() {
    vector<int> arr1 = {1, 2, 2};
    vector<vector<int>> result1 = findSubsets(arr1);

    cout << "Subsets for {1, 2, 2}:" << endl;
    for (const auto& subset : result1) {
        cout << "{";
        for (int val : subset) {
            cout << val << " ";
        }
        cout << "}" << endl;
    }

    vector<int> arr2 = {1, 2};
    vector<vector<int>> result2 = findSubsets(arr2);

    cout << "\nSubsets for {1, 2}:" << endl;
    for (const auto& subset : result2) {
        cout << "{";
        for (int val : subset) {
            cout << val << " ";
        }
        cout << "}" << endl;
    }

    return 0;
}
